public class OpenPosition {
  private String positionName;
  private ApplicationQueue applications; // the priority queue of all applications
  private int capacity;                  // the number of vacancies

  /**
   * Creates a new open position with the given capacity
   * 
   * @param capacity the number of vacancies of this position
   * @throws IllegalArgumentException with a descriptive error message if the capacity is not a
   *                                  positive integer
   */
  public OpenPosition(String positionName, int capacity) {
    // verify the value of capacity
    if (capacity < 1) {
      throw new IllegalArgumentException("Position capacity must be a positive integer!");
    }

    // initialize the data fields appropriately
    this.positionName = positionName;
    this.capacity = capacity;
    applications = new ApplicationQueue(capacity);
  }

  /**
   * Returns the name of the open position
   * 
   * @return the name of the open position
   */
  public String getPositionName() { return this.positionName; }

  /**
   * Tries to add the given Application to the priority queue of this position.  return
   * False when the new Application has a lower score than the lowest-scored Application
   * in the queue.
   * 
   * @return Whether the given Application was added successfully
   */
  public boolean add(Application application) {
    // if the queue is full, determine whether this application has a higher score than 
    // the current lowest-scoring application; if not, do not add it
    if (applications.size() == capacity) {
      if (application.compareTo(applications.peek()) > 0) {
        Application removed = applications.dequeue();
        applications.enqueue(application);
        return true;
      }
    } else if (applications.size() < capacity) {
      applications.enqueue(application);
      return true;
    }

    //  if there is room in the queue OR this application has a higher score than the current
    // lowest-scoring application, add it to the queue

    return false;
  }

  /**
   * Returns the list of Applications in the priority queue.
   * 
   * @return The list of Applications in the priority queue, in increasing order of the
   * scores.
   */
  public String getApplications() {
    return applications.toString();
  }

  /**
   * Returns the total score of Applications in the priority queue.
   * 
   * @return The total score of Applications in the priority queue.
   */
  public int getTotalScore() {
    //calculate the total score of all applications currently in the queue
    int totalScore = 0;

    for (Application a : applications) {
      totalScore += a.getScore();
    }

    return totalScore;
  }
}

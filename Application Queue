import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Array-based heap implementation of a priority queue containing Applications. Guarantees the
 * min-heap invariant, so that the Application at the root should have the lowest score, and
 * children always have a higher or equal score as their parent. The root of a non-empty queue
 * is always at index 0 of this array-heap.
 * 
 * @author 
 */
public class ApplicationQueue implements PriorityQueueADT<Application>, Iterable<Application> {
  private Application[] queue; // array min-heap of applications representing this priority queue
  private int size;            // size of this priority queue

  /**
   * Creates a new empty ApplicationQueue with the given capacity
   * 
   * @param capacity Capacity of this ApplicationQueue
   * @throws IllegalArgumentException with a descriptive error message if the capacity is not a
   *                                  positive integer
   */
  public ApplicationQueue(int capacity) {
    // verify the capacity
    if (capacity < 1) {
      throw new IllegalArgumentException("Application Queues must have at least one open slot!");
    }

    //initialize fields appropriately
    queue = new Application[capacity];
    size = 0;

  }

  /**
   * Checks whether this ApplicationQueue is empty
   * 
   * @return {@code true} if this ApplicationQueue is empty
   */
  @Override
  public boolean isEmpty() {
    return size == 0;
  }

  /**
   * Returns the size of this ApplicationQueue
   * 
   * @return the size of this ApplicationQueue
   */
  @Override
  public int size() {
    return size;
  }

  /**
   * Adds the given Application to this ApplicationQueue and use the percolateUp() method to
   * maintain min-heap invariant of ApplicationQueue. Application should be compared using 
   * the Application.compareTo() method.
   * 
   * 
   * @param o Application to add to this ApplicationQueue
   * @throws NullPointerException if the given Application is null
   * @throws IllegalStateException with a descriptive error message if this ApplicationQueue is 
   * full
   */
  @Override
  public void enqueue(Application o) {
    // verify the application
    if (o == null) {
      throw new NullPointerException("Cannot enqueue a null Application!");
    }

    // verify that the queue is not full
    if (size >= queue.length) {
      throw new IllegalStateException("Cannot add Application if queue is full!");
    }

    // if allowed, add the application to the queue and percolate to restore the heap 
    //condition
    queue[size] = o;
    size++;

    percolateUp(size - 1);
  }

  /**
   * Removes and returns the Application at the root of this ApplicationQueue, i.e. the 
   * Application with the lowest score.
   * 
   * @return the Application in this ApplicationQueue with the smallest score
   * @throws NoSuchElementException with a descriptive error message if this ApplicationQueue is
   *                                empty
   */
  @Override
  public Application dequeue() {
    // verify that the queue is not empty
    if (this.isEmpty()) {
      throw new NoSuchElementException("Cannot dequeue an empty queue!");
    }

    // save the lowest-scoring application
    Application dequeued = queue[0];

    // replace the root of the heap and percolate to restore the heap condition
    queue[0] = queue[size - 1];
    size--;
    percolateDown(0);  

    // return the lowest-scoring application
    return dequeued;
  }

  /**
   * An implementation of percolateDown() method. Restores the min-heap invariant of a given
   * subtree by percolating its root down the tree. If the element at the given index does not
   * violate the min-heap invariant (it is due before its children), then this method does not
   * modify the heap. Otherwise, if there is a heap violation, then swap the element with the
   * correct child and continue percolating the element down the heap.
   * 
   * This method may be implemented recursively OR iteratively.
   * 
   * @param i index of the element in the heap to percolate downwards
   * @throws IndexOutOfBoundsException if index is out of bounds - do not catch the exception
   */
  private void percolateDown(int i) {
    int lowerValueIndex; //used when there are two children
    Application indexBoundCheck = queue[i]; //IndexOutOfBounds thrown here
    // implement the min-heap percolate down algorithm to modify the heap in place
    if (i * 2 + 1 >= size || queue[i * 2 + 1] == null) { //checking for left child
      return;
    }
    if (i * 2 + 2 >= size || queue[i * 2 + 2] == null) { //checking for right child
      if (queue[i].compareTo(queue[i * 2 + 1]) > 0) { //no right child
        Application temp = queue[i];
        queue[i] = queue[i * 2 + 1];
        queue[i * 2 + 1] = temp;
        percolateDown(i * 2 + 1);
      }
    } else { //yes right child
      if (queue[i * 2 + 1].compareTo(queue[i * 2 + 2]) >= 0) {
        lowerValueIndex = i * 2 + 2;
      } else {
        lowerValueIndex = i * 2 + 1;
      }
      if (queue[i].compareTo(queue[lowerValueIndex]) > 0) {
        Application temp = queue[i];
        queue[i] = queue[lowerValueIndex];
        queue[lowerValueIndex] = temp;
        percolateDown(lowerValueIndex);
      }
    }
  }

  /**
   * An implementation of percolateUp() method. Restores the min-heap invariant of the tree
   * by percolating a leaf up the tree. If the element at the given index does not violate the
   * min-heap invariant (it occurs after its parent), then this method does not modify the heap.
   * Otherwise, if there is a heap violation, swap the element with its parent and continue
   * percolating the element up the heap.
   * 
   * This method may be implemented recursively OR iteratively.
   * 
   * Feel free to add private helper methods if you need them.
   * 
   * @param i index of the element in the heap to percolate upwards
   * @throws IndexOutOfBoundsException if index is out of bounds - do not catch the exception
   */
  private void percolateUp(int i) {
    // implement the min-heap percolate up algorithm to modify the heap in place
    //(i+1)/2
    if (i < 0) {
      return;
    }
    if (queue[i].compareTo(queue[(i - 1) / 2]) < 0) {
      Application temp = queue[i];
      queue[i] = queue[(i - 1) / 2];
      queue[(i - 1) / 2] = temp;
      percolateUp((i - 1) / 2);
    }
  }

  /**
   * Returns the Application at the root of this ApplicationQueue, i.e. the Application with
   * the lowest score.
   * 
   * @return the Application in this ApplicationQueue with the smallest score
   * @throws NoSuchElementException if this ApplicationQueue is empty
   */
  @Override
  public Application peek() {
    // verify that the queue is not empty
    if (this.isEmpty()) {
      throw new NoSuchElementException("Cannot peek an empty queue!");
    }

    // return the lowest-scoring application
    return queue[0];
  }

  /**
   * Returns a deep copy of this ApplicationQueue containing all of its elements in the same 
   * order. This method does not return the deepest copy, meaning that you do not need to 
   * duplicate applications. Only the instance of the heap (including the array and its size) will
   *  be duplicated.
   * 
   * @return a deep copy of this ApplicationQueue. The returned new application queue has the same
   *         length and size as this queue.
   */
  public ApplicationQueue deepCopy() {
    // implement this method according to its Javadoc comment
    ApplicationQueue queueCopy = new ApplicationQueue(queue.length);
    for (int i = 0; i < size; i++) {
      queueCopy.enqueue(queue[i]);
    }

    return queueCopy;
  }

  /**
   * Returns a String representing this ApplicationQueue, where each element (application) of the
   * queue is listed on a separate line, in order from the lowest score to the highest score.
   * 
   * This implementation is provided.
   * 
   * @see Application#toString()
   * @see ApplicationIterator
   * @return a String representing this ApplicationQueue
   */
  @Override
  public String toString() {
    StringBuilder val = new StringBuilder();

    for (Application a : this) {
      val.append(a).append("\n");
    }

    return val.toString();
  }
  /**
   * Returns an Iterator for this ApplicationQueue which proceeds from the lowest-scored to the
   * highest-scored Application in the queue.
   * 
   * This implementation is provided.
   * 
   * @see ApplicationIterator
   * @return an Iterator for this ApplicationQueue
   */
  @Override
  public Iterator<Application> iterator() {
    return new ApplicationIterator(this);
  }
}

import java.util.NoSuchElementException;

/**
 * This class implements unit test methods to check the correctness of Application, 
 * ApplicationIterator, ApplicationQueue and OpenPosition classes in the assignment.
 *
 *@author
 */
public class OpenPositionTester {

  /**
   * This method tests and makes use of the Application constructor, getter methods,
   * toString() and compareTo() methods.
   * 
   * @return true when this test verifies the functionality, and false otherwise
   */
  public static boolean testApplication() {
    boolean error = false;
    Application testApp = null;
    try {
      // create an Application with valid input
      testApp = new Application("Craig", "craig@email.com", 69);
    } catch (Exception e) {
      System.out.println("testApplication 1 failed! Application instance not successfully created"
          + " when it should have been!");
      return false;
    }

    Application wrongApp = null;
    // create an Application with invalid input:
    // blank name
    try {
      wrongApp = new Application(" ", "blake@email.com", 22);
      System.out.println("testApplication 2a failed! Made an app with no name!");
      error = true;
    } catch (Exception e) {
      //expected behavior
    }
    // null email
    try {
      wrongApp = new Application("Blake", null, 22);
      System.out.println("testApplication 2b failed! Made an app with null email!");
      error = true;
    } catch (Exception e) {
      //expected behavior
    }
    // no @ email
    try {
      wrongApp = new Application("Blake", "blakeemail.com", 22);
      System.out.println("testApplication 2c failed! Made an app with no @ in email!");
      error = true;
    } catch (Exception e) {
      //expected behavior
    }
    // too many @ email
    try {
      wrongApp = new Application("Blake", "blake@@email.com", 22);
      System.out.println("testApplication 2d failed! Made an app with too many @ in email!");
      error = true;
    } catch (Exception e) {
      //expected behavior
    }
    // invalid score
    try {
      wrongApp = new Application("Blake", "blake@email.com", 101);
      System.out.println("testApplication 2e failed! Made an app with too high a score!");
      error = true;
    } catch (Exception e) {
      //expected behavior
    }
    try {
      wrongApp = new Application("Blake", "blake@email.com", -1);
      System.out.println("testApplication 2f failed! Made an app with too low a score!");
      error = true;
    } catch (Exception e) {
      //expected behavior
    }
    try {
      testApp = new Application("Blake", "blake@email.com", 0);
      testApp = new Application("Blake", "blake@email.com", 100);
    } catch (Exception e) {
      error = true;
      System.out.println("testApplication 2g failed!  Didn't make an app on the edges of the "
          + "acceptable scores!");
    }

    // reset and make second app properly for comparisons
    testApp = new Application("Craig", "craig@email.com", 69);
    Application testApp2 = new Application("Blake", "blake@email.com", 22);
    // verify getters
    if (!testApp.getName().equals("Craig") || !testApp2.getName().equals("Blake")) {
      error = true;
      System.out.println("testApplication 3a failed! getName() got the wrong name!");
    }

    if (!testApp.getEmail().equals("craig@email.com") 
        || !testApp2.getEmail().equals("blake@email.com")) {
      error = true;
      System.out.println("testApplication 3b failed! getEmail() got the wrong email!");
    }

    if (testApp.getScore() != 69 || testApp2.getScore() != 22) {
      error = true;
      System.out.println("testApplication 3c failed! getScore() got the wrong score!");
    }

    // verify compareTo

    if (testApp.compareTo(testApp2) <= 0) {
      System.out.println("testApplication 4a failed!  Craig is not less than or equal to Blake!");
      error = true;
    }
    if (testApp2.compareTo(testApp) >= 0) {
      System.out.println("testApplication 4b failed!  Blake is not more than or equal to Craig!");
      error = true;
    }
    if (testApp.compareTo(new Application("Ben", "ben@email.com", 69)) != 0) {
      System.out.println("testApplication 4c failed!  Craig should be equal to Ben!");
      error = true;
    }
    try {
      testApp.compareTo(null);
      error = true;
      System.out.println("testApplication 4d failed! Successfully compared a null object!");
    } catch (NullPointerException e) {
      //expected behavior
    }

    // verify toString

    if (!testApp.toString().equals("Craig:craig@email.com:69") 
        || !testApp2.toString().equals("Blake:blake@email.com:22")) {
      System.out.println("testApplication 5 failed! toString did not provide the proper string!");
      error = true;
    }

    return !error;
  }

  /**
   * This method tests and makes use of the ApplicationIterator class.
   * 
   * @return true when this test verifies the functionality, and false otherwise
   */
  public static boolean testApplicationIterator() {
    // create an ApplicationQueue with capacity at least 3
    // and at least 3 Applications with different scores
    ApplicationQueue testQueue = new ApplicationQueue(10);
    Application testApp1 = new Application("Blake", "blake@email.com", 22);
    Application testApp2 = new Application("Craig", "craig@email.com", 69);
    Application testApp3 = new Application("Eric", "eric@email.com", 78);
    Application testApp4 = new Application("Ben", "ben@email.com", 46);
    Application testApp5 = new Application("Brooke", "brooke@email.com", 99);
    Application testApp6 = new Application("Sunny", "hoot@email.com", 58);

    // add those Applications to the queue
    testQueue.enqueue(testApp1);
    testQueue.enqueue(testApp2);
    testQueue.enqueue(testApp3);
    testQueue.enqueue(testApp4);
    testQueue.enqueue(testApp5);
    testQueue.enqueue(testApp6);


    // verify that iterating through the queue gives you the applications in order of
    // INCREASING score
    String expectedString = testApp1.toString() + " - " + testApp4.toString() + " - " 
        + testApp6.toString() + " - " + testApp2.toString() + " - " + testApp3.toString() + " - " 
        + testApp5.toString() + " - "; 
    String actualString = "";
    ApplicationIterator testIterator = new ApplicationIterator(testQueue);
    for (int i = 0; i < testQueue.size(); i++) {

      actualString = actualString + testIterator.next().toString() +" - ";
    }

    if (expectedString.equals(actualString)) {
      return true;
    }
    System.out.println("testApplicationIterator failed!  Expected " + expectedString + ", got " 
        + actualString);
    return false;
  }

  /**
   * This method tests and makes use of the enqueue() and dequeue() methods
   * in the ApplicationQueue class.
   * 
   * @return true when this test verifies the functionality, and false otherwise
   */
  public static boolean testEnqueueDequeue() {
    try {
    boolean error = false;
    // create an ApplicationQueue with capacity 3
    // and at least 4 Applications with different scores
    ApplicationQueue testQueue = new ApplicationQueue(5);
    Application testApp1 = new Application("Blake", "blake@email.com", 22);
    Application testApp2 = new Application("Craig", "craig@email.com", 69);
    Application testApp3 = new Application("Eric", "eric@email.com", 78);
    Application testApp4 = new Application("Ben", "ben@email.com", 46);
    Application testApp5 = new Application("Brooke", "brooke@email.com", 99);
    Application testApp6 = new Application("Sunny", "hoot@email.com", 58);

    // enqueue an invalid value (null)
    try {
      testQueue.enqueue(null);
      error = true;
      System.out.println("testEnqueueDequeue 1 failed!  Enqueued a null value!");
    } catch (NullPointerException e) {
      //expected behavior
    }

    // enqueue one valid application
    try {
      testQueue.enqueue(testApp1);
    } catch (Exception e) {
      System.out.println("testEnqueueDequeue 2 failed!  Threw an exception when enqueueing a valid"
          + " app!");
      e.printStackTrace();
      return false; //can't continue since there'll be nothing to dequeue
    }

    // enqueue four more valid applications
    try {
    testQueue.enqueue(testApp2);
    testQueue.enqueue(testApp3);
    testQueue.enqueue(testApp4);
    testQueue.enqueue(testApp5);
    } catch (Exception e) {
      System.out.println("testEnqueueDequeue 2b failed!  Could not queue to capacity!");
      return false; //cannot continue testing with unknown amount of apps in queue
    }

    // enqueue one more application (exceeds capacity)
    try {
      testQueue.enqueue(testApp6);
      error = true;
      System.out.println("testEnqueueDequeue 3 failed!  Added more apps than there should have been"
          + " space for!");
    } catch (IllegalStateException e) {
      //expected behavior
    }

    // dequeue one application (should be lowest score)
    Application dequeuedApp = null;
    try {
      dequeuedApp = testQueue.dequeue();

      if (dequeuedApp == null || dequeuedApp.compareTo(testApp1) != 0) {
        error = true;
        System.out.println("testEnqueueDequeue 4a failed! Dequeued the wrong app!");
        System.out.println("Should have been Blake, Dequeued: " + dequeuedApp);
      }
    } catch (Exception e) {
      System.out.println("testEnqueueDequeue 4a failed!  Exception thrown on valid dequeue!");
      e.printStackTrace();
      return false; //No dequeueing possible
    }

    // dequeue all applications
    //test second dequeue
    try {
    dequeuedApp = testQueue.dequeue();
    } catch (Exception e) {
      System.out.println("Dequeueing throws an exception!");
      e.printStackTrace();
      return false; //if it can't dequeue, no point in continuing
    }

    if (dequeuedApp == null || dequeuedApp.compareTo(testApp4) != 0) {
      error = true;
      System.out.println("testEnqueueDequeue 4b failed! Dequeued the wrong app!");
      System.out.println("Should have been Ben, Dequeued: " + dequeuedApp);
    }

    try {
    //finish dequeueing
    testQueue.dequeue();
    testQueue.dequeue();
    testQueue.dequeue();// end of queue
    } catch (Exception e) {
      System.out.println("testEnqueueDequeue 4c failed! Didn't make it through emptying the list!");
      return false; //last test is no good at this point.
    }

    // dequeue from an empty queue
    try {
      dequeuedApp = testQueue.dequeue();
      error = true;
      System.out.println("testEnqueueDequeue 5 failed!  Dequeued from a should-have-been-empty "
          + "priority queue!");
      System.out.println("Dequeued: " + dequeuedApp);
    } catch (NoSuchElementException e) {
      //expected behavior
    }


    return !error;
    } catch (Exception e) { //catch block of last resort
      System.out.println("Look, it's broken... somehow.  Follow the stack trace like it's like the"
          + " White Rabbit and fix thy errors, or find fellows to help you.");
      e.printStackTrace();
      return false;
    }
  }

  /**
   * This method tests and makes use of the common methods (isEmpty(), size(), peek())
   * in the ApplicationQueue class.
   * 
   * @return true when this test verifies the functionality, and false otherwise
   */
  public static boolean testCommonMethods() {
    boolean error = false;
    ApplicationQueue testQueue = null;

    // create an ApplicationQueue with 0 capacity (should fail)
    try {
      testQueue = new ApplicationQueue(0);
      error = true;
      System.out.println("testCommonMethods 1 failed! Created a queue with 0 capacity!");
    } catch (IllegalArgumentException e) {
      //expected behavior
    }

    // create an ApplicationQueue with capacity 3
    // and at least 3 Applications with different scores
    testQueue = new ApplicationQueue(10);
    Application testApp1 = new Application("Blake", "blake@email.com", 22);
    Application testApp2 = new Application("Craig", "craig@email.com", 69);
    Application testApp3 = new Application("Eric", "eric@email.com", 78);
    Application testApp4 = new Application("Ben", "ben@email.com", 46);
    Application testApp5 = new Application("Brooke", "brooke@email.com", 99);
    Application testApp6 = new Application("Sunny", "hoot@email.com", 58);

    // verify the methods' behaviors on an empty queue
    if (testQueue.size() != 0) {
      error = true;
      System.out.println("testCommonMethods 2a failed! Queue size should be 0, is " 
          + testQueue.size());
    }
    if (testQueue.isEmpty() == false) {
      error = true;
      System.out.println("testCommonMethods 2b failed! Queue should be empty, but isn't!");
    }
    try {
      testQueue.peek();
      error = true;
      System.out.println("testCommonMethods 2c failed! Successfully peeked an empty queue!");
    } catch (NoSuchElementException e) {
      //expected behavior
    }
    // add one Application and verify the methods' behaviors
    testQueue.enqueue(testApp6);
    if (testQueue.size() != 1) {
      error = true;
      System.out.println("testCommonMethods 3a failed! Queue size should be 1, is " 
          + testQueue.size());
    }
    if (testQueue.isEmpty() == true) {
      error = true;
      System.out.println("testCommonMethods 3b failed! Queue shouldn't be empty, but is!");
    }
    if (!testQueue.peek().equals(testApp6)) {
      error = true;
      System.out.println("testCommonMethods 3c failed! Peeked an app other than Sunny's!");
    }

    // add the rest of the Applications and verify the methods' behaviors
    testQueue.enqueue(testApp5);
    testQueue.enqueue(testApp4);
    testQueue.enqueue(testApp3);
    testQueue.enqueue(testApp1);
    testQueue.enqueue(testApp2);
    if (testQueue.size() != 6) {
      error = true;
      System.out.println("testCommonMethods 4a failed! Queue size should be 6, is " 
          + testQueue.size());
    }
    if (testQueue.isEmpty() == true) {
      error = true;
      System.out.println("testCommonMethods 4b failed! Queue shouldn't be empty, but is!");
    }
    if (!testQueue.peek().equals(testApp1)) {
      error = true;
      System.out.println("testCommonMethods 4c failed! Peeked an app other than Blake's!");
    }

    return !error;
  }

  /**
   * This method tests and makes use of OpenPosition class.
   * 
   * @return true when this test verifies the functionality, and false otherwise
   */
  public static boolean testOpenPosition() {
    boolean error = false;
    OpenPosition testPosition = null;

    // create an OpenPosition with 0 capacity (should fail)
    try {
      testPosition = new OpenPosition("Intern", 0);
      error = true;
      System.out.println("testOpenPosition 1 failed! Created an open position without open slots!");
    } catch (IllegalArgumentException e) {
      //expected behavior
    }
    // create an OpenPosition with capacity 3
    // and at least 5 Applications with different scores
    testPosition = new OpenPosition("Technician", 3);
    Application testApp1 = new Application("Blake", "blake@email.com", 22);
    Application testApp2 = new Application("Craig", "craig@email.com", 69);
    Application testApp3 = new Application("Eric", "eric@email.com", 78);
    Application testApp4 = new Application("Ben", "ben@email.com", 46);
    Application testApp5 = new Application("Brooke", "brooke@email.com", 99);

    //verify that the name of the position was created appropriately
    if (!testPosition.getPositionName().equals("Technician")) {
      error = true;
      System.out.println("testOpenPosition 2 failed!  Position name should have been Technician, "
          + "but was " + testPosition.getPositionName());
    }

    // verify that the 3 MIDDLE-scoring Applications can be added
    // don't use the highest and lowest scoring applications YET
    testPosition.add(testApp2);
    testPosition.add(testApp3);
    testPosition.add(testApp4);

    // verify that getApplications returns the correct value for your input
    String expectedString = testApp4 + "\n" + testApp2 + "\n" + testApp3 + "\n";
    String actualString = testPosition.getApplications();
    if (!expectedString.equals(actualString)) {
      error = true;
      System.out.println("testOpenPosition 3 failed! Expected: " + expectedString + ", got " 
          + actualString);
    }


    // verify that the result of getTotalScore is the sum of all 3 Application scores
    if (testPosition.getTotalScore() != 193) {
      error = true;
      System.out.println("testOpenPosition 4 failed! Expected a total score of 193, got " 
      + testPosition.getTotalScore());
    }

    // add low app, verify that the lowest-scoring application is NOT added to the OpenPosition
    if (testPosition.add(testApp1)) {
      error = true;
      System.out.println("testOpenPosition 5 failed! Added an app lower than any of those in the "
          + "open position!");
    }

    // add high app, verify that the highest-scoring application IS added to the OpenPosition
    if (!testPosition.add(testApp5)) {
      error = true;
      System.out.println("testOpenPosition 6 failed! Did not add a higher app than the lowest in "
          + "the queue!");
    }
    
    // verify that getApplications has changed correctly
    expectedString = testApp2 + "\n" + testApp3 + "\n" + testApp5 + "\n";
    actualString = testPosition.getApplications();
    if (!expectedString.equals(actualString)) {
      error = true;
      System.out.println("testOpenPosition 7 failed! Expected: " + expectedString + ", got " 
          + actualString);
    }

    // verify that the result of getTotalScore has changed correctly
    if (testPosition.getTotalScore() != 246) {
      error = true;
      System.out.println("testOpenPosition 8 failed! Expected a total score of 246, got " 
      + testPosition.getTotalScore());
      System.out.println(testPosition.getApplications());
    }

    return !error;
  }

  /**
   * This method calls all the test methods defined and implemented in your OpenPositionTester class.
   * 
   * @return true if all the test methods defined in this class pass, and false otherwise.
   */
  public static boolean runAllTests() {
    return testApplication() && testApplicationIterator()
        && testEnqueueDequeue() && testCommonMethods()
        && testOpenPosition();
  }

  /**
   * Driver method defined in this OpenPositionTester class
   * 
   * @param args input arguments if any.
   */
  public static void main(String[] args) {
    System.out.print(runAllTests());
  }
}

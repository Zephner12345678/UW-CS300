public class DroppableObject extends DraggableObject {
  private InteractiveObject target; //target of this DroppableObject
  
  /**
   * Creates a new DroppableObject with the specified name, x/y positions, message, target and 
   * next clue in the chain.
   * 
   * @param name     name given to this new DroppableObject
   * @param x        x-position given to this new DroppableObject
   * @param y        y-position given to this new DroppableObject
   * @param message  message given to this new DroppableObject
   * @param target   where this DroppableObject should be dropped to get the next clue
   * @param nextClue reference to the next clue of this DroppableObject
   */
  public DroppableObject(String name, int x, int y, String message, InteractiveObject target,
      InteractiveObject nextClue) {
    super(name, x, y, message);
    this.target = target;
    this.setNextClueâ€‹(nextClue);
  }
  
  @Override
  /**
   * Stops dragging this DroppableObject. Also, if this DroppableObject is over its target and the 
   * target is activated, this method (1) deactivates both this object and its target, (2) activates
   *  the next clue, and (3) prints the message of this DraggableObject to the console.
   */
  public void mouseReleased() {
    super.mouseReleased();
    if (this.isOver(this.target)) {
      this.deactivate();
      target.deactivate();
      this.activateNextClue();
      System.out.println(this.message());
    }
  }
  
  /**
   * Checks whether this object is over another interactive object (occupying similar x/y 
   * positions). If any part of this image is on the other image, then this image is over that 
   * image.
   * 
   * @param other the other InteractiveObject we are checking against
   * @return true if this object is over the other object, false otherwise.
   */
  public boolean isOver(InteractiveObject other) {
    if (this.getX() > other.getX() + other.image.width 
        || this.getX() + this.image.width < other.getX()
        || this.getY() > other.getY() + other.image.height
        || this.getY() + this.image.height < other.getY()
        || !other.isActive()) {
      return false;
    }
    return true;
  }
}
